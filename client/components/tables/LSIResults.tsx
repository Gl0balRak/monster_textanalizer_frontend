import React from 'react';
import { cn } from '@/lib/utils';
import { LSITable } from '@/components/tables/LSITable';

interface LSIDisplayItem {
  phrase: string;
  count: number;
  competitors_count: number;
  our_count?: number;
  difference?: number;
  target?: number;
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º LSIItem –∏–∑ LSITable –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
interface LSITableItem {
  ngram: string;
  forms?: string[];
  competitors: number;
  avg_count: number;
  my_count: number;
  coverage_percent: number;
}

interface LSIData {
  unigrams?: LSITableItem[];
  bigrams?: LSITableItem[];
  trigrams?: LSITableItem[];
}

interface CompetitorResult {
  url: string;
  [key: string]: any;
}

interface SiteAnalysis {
  [key: string]: any;
}

interface LSIResultsProps {
  lsiResults: LSIData | null;
  selectedCompetitors: string[];
  mySiteAnalysis: SiteAnalysis | null;
  results: CompetitorResult[] | null;
  medianMode: boolean;
  onKeywordsAnalysis: () => void;
  keywordsLoading: boolean;
  keywordsProgress: number;
}

export const LSIResults: React.FC<LSIResultsProps> = ({
  lsiResults,
  selectedCompetitors,
  mySiteAnalysis,
  results,
  medianMode,
  onKeywordsAnalysis,
  keywordsLoading,
  keywordsProgress
}) => {
  if (!lsiResults || selectedCompetitors.length === 0 || !mySiteAnalysis || !results) {
    return null;
  }

  const isLoading = keywordsLoading || keywordsProgress > 0;

  return (
    <div className="mt-8 space-y-6">
      <div className="bg-white rounded-lg p-6 shadow-sm">
        <h2 className="text-xl font-bold text-gray-900 mb-2">
          –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤ –∑–∞–¥–∞—é—â–∏—Ö —Ç–µ–º–∞—Ç–∏–∫—É (LSI)
        </h2>
        <p className="text-gray-600 mb-6">
          –ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã.
          –§—Ä–∞–∑—ã —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Å–º—ã—Å–ª—É, –æ–±—â–µ—Å–∞–π—Ç–æ–≤—ã–π –º—É—Å–æ—Ä –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω.
          {medianMode && (
            <span className="block mt-2 text-sm text-gray-500">
              –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å–µ—á–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
            </span>
          )}
        </p>
      </div>

      {/* –ë–∏–≥—Ä–∞–º–º—ã */}
      {lsiResults.bigrams && lsiResults.bigrams.length > 0 && (
        <LSITable
          title="–ë–∏–≥—Ä–∞–º–º—ã (–ø–∞—Ä—ã —Å–ª–æ–≤)"
          data={lsiResults.bigrams}
          itemsPerPage={15}
        />
      )}

      {/* –£–Ω–∏–≥—Ä–∞–º–º—ã */}
      {lsiResults.unigrams && lsiResults.unigrams.length > 0 && (
        <LSITable
          title="–£–Ω–∏–≥—Ä–∞–º–º—ã (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞)"
          data={lsiResults.unigrams}
          itemsPerPage={15}
        />
      )}

      {/* –¢—Ä–∏–≥—Ä–∞–º–º—ã */}
      {lsiResults.trigrams && lsiResults.trigrams.length > 0 && (
        <LSITable
          title="–¢—Ä–∏–≥—Ä–∞–º–º—ã (—Ç—Ä–∏ —Å–ª–æ–≤–∞)"
          data={lsiResults.trigrams}
          itemsPerPage={15}
          defaultExpanded={false}
        />
      )}

      {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø–æ—Å–ª–µ LSI */}
      <div className="mt-6">
        <button
          onClick={onKeywordsAnalysis}
          disabled={isLoading}
          className={cn(
            'inline-flex items-center justify-center gap-2',
            'px-6 py-3 rounded-md font-medium transition-colors',
            'bg-red-600 text-white hover:bg-red-700',
            'disabled:opacity-50 disabled:cursor-not-allowed'
          )}
        >
          {isLoading ? (
            <>
              <span className="inline-block animate-spin">‚è≥</span>
              <span>–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤...</span>
            </>
          ) : (
            <>
              <span>üìä</span>
              <span>–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø–æ —Ç–µ–≥–∞–º</span>
            </>
          )}
        </button>
      </div>
    </div>
  );
};
